#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform vec3 LightPosition_worldspace;

uniform vec3 LightColor;
uniform float LightPower;
uniform float AmbientPower;
uniform vec3 MaterialSpecularColor;
uniform int MaterialSpecularLobe;

uniform int lightType;

void main()
{	
	// Material properties
	vec3 MaterialDiffuseColor = texture2D(myTextureSampler, UV).rgb;

	// Distance calculations for point and spot lights
	float distanceSqr = 1;
	if(lightType != 0)	// != directional light
	{
		vec3 fragmentToLight = (LightPosition_worldspace - Position_worldspace);
		distanceSqr = dot(fragmentToLight, fragmentToLight);
	}
	

	// Normalize the three relevant vectors
	vec3 N = normalize(Normal_cameraspace);					// Normal of the computed fragment, in camera space
	vec3 L = normalize(LightDirection_cameraspace);			// Direction of the light (from the fragment to the light)
	vec3 E = normalize(EyeDirection_cameraspace);			// Eye vector (towards the camera)
	vec3 R = normalize(2 * dot(N, L) * N - L);				// Direction in which the triangle reflects the light. R = 2 * (N.L) * N – L
//	vec3 R = reflect(-L, N); // expands to -L - 2.0 * dot(N, -L) * N.
	
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp(dot(N, L), 0, 1);

	// compute self-shadowing term
	float shadow = clamp(4 * cosTheta, 0, 1);
		
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp(dot(E, R), 0, 1);

	// final color calculations
	vec3 ambient	= AmbientPower * MaterialDiffuseColor;
	vec3 diffuse	= MaterialDiffuseColor * LightColor *  LightPower;
	vec3 specular	= MaterialSpecularColor * LightColor * LightPower;

	// variant A: diffuse and specular parts independant from shadow and distanceSqr. Order: ((diffuse + specular) * shadow) / distanceSqr;
	color = ambient + shadow * (diffuse * cosTheta + specular * pow(cosAlpha, MaterialSpecularLobe)) / distanceSqr;	
	// variant B: distanceSqr part of diffuse and specular parts. Order: (diffuse / distanceSqr + specular / distanceSqr) * shadow					
//	color = ambient + shadow * (diffuse * cosTheta /  distanceSqr + specular * pow(cosAlpha, MaterialSpecularLobe) / distanceSqr);	
	// variant C: distanceSqr and shadow part of diffuse and specular parts. Order: shadow * diffuse / distanceSqr + shadow * specular /distanceSqr		
//	color = ambient + shadow * diffuse * cosTheta / distanceSqr + shadow * specular * pow(cosAlpha, MaterialSpecularLobe) / distanceSqr;
	// Variant D: like A but with different distance caluclation: I = A +((S *(D * N.L + (R.V)n)) * Att)
//	color = ambient + ((shadow * (diffuse * cosTheta + specular * pow(cosAlpha, MaterialSpecularLobe))) * (1 - distanceSqr));				
}