#version 410 core

// define the number of CPs in the output patch
layout (vertices = 3) out;

uniform vec3 EyePosition_worldspace;

// attributes of the input CPs
in vec3 Position_cs_worldspace[];
in vec2 UV_cs[];
in vec3 Normal_cs_worldspace[];

// attributes of the output CPs
out vec3 Position_es_worldspace[];
out vec2 UV_es[];
out vec3 Normal_es_worldspace[];

float GetTessLevel(float Distance0, float Distance1)
{
	float AvgDistance = (Distance0 + Distance1) / 2.0;

	if (AvgDistance <= 2.0) {
		return 10.0;
	}
	else if (AvgDistance <= 5.0) {
		return 7.0;
	}
	else {
		return 3.0;
	}
} 

void main()
{
	// Set the control points of the output patch
	UV_es[gl_InvocationID] = UV_cs[gl_InvocationID];
	Normal_es_worldspace[gl_InvocationID] = Normal_cs_worldspace[gl_InvocationID];
	Position_es_worldspace[gl_InvocationID] = Position_cs_worldspace[gl_InvocationID];

	// Calculate the distance from the camera to the three control points
	float EyeToVertexDistance0 = distance(EyePosition_worldspace, Position_es_worldspace[0]);
	float EyeToVertexDistance1 = distance(EyePosition_worldspace, Position_es_worldspace[1]);
	float EyeToVertexDistance2 = distance(EyePosition_worldspace, Position_es_worldspace[2]);

	// Calculate the tessellation levels
	gl_TessLevelOuter[0] = GetTessLevel(EyeToVertexDistance1, EyeToVertexDistance2);
	gl_TessLevelOuter[1] = GetTessLevel(EyeToVertexDistance2, EyeToVertexDistance0);
	gl_TessLevelOuter[2] = GetTessLevel(EyeToVertexDistance0, EyeToVertexDistance1);
	gl_TessLevelInner[0] = gl_TessLevelOuter[2];
} 