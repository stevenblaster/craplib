#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D diffuse_texture;
uniform sampler2D normal_texture;
uniform sampler2D height_texture;

uniform vec3 LightPosition_worldspace;

uniform vec3 LightColor;
uniform float LightPower;
uniform float AmbientPower;
uniform vec3 MaterialSpecularColor;
uniform int MaterialSpecularLobe;

uniform int lightType;
uniform int mappingMode;
uniform int specularMode;

uniform int selfShadowing;
uniform int ambientLighting;
uniform int diffuseLighting;
uniform int specularLighting;

uniform int displacementSteps;
uniform int displacementRefinementSteps;
uniform int displacementUVFactor;

void displaceUV(out vec2 finalUV)
{
	finalUV = UV;
	float displSteps = displacementSteps;
	float refinSteps = displacementRefinementSteps;

	float h				= 1.0f;
	vec2  dUV			= -(EyeDirection_tangentspace / displSteps / displacementUVFactor).xy;
	float previous_hit	= 0;
	float hit_h			= 0;
	float stepSize		= 1.0f / displSteps;
	vec2  tUV			= UV;
	float hit_step		= 0;
   
	for (int i = 0; i < displSteps; ++i) 
	{
		h  -= stepSize;
		tUV += dUV;
		float h_tex = texture2D(HeightTextureSampler, tUV).r;
		float is_first_hit = clamp((h_tex - h - previous_hit) * 4999999, 0, 1);

		// equivalent to: if ( (h_tex < h) && !prev_hit )
		hit_h		 += is_first_hit * h; 
		hit_step	 += is_first_hit * i;
		previous_hit += is_first_hit;
	}
	finalUV += ((hit_step + 1) * dUV);

	// refinement steps:
	h			 = hit_h + stepSize;	// start one location above the first hit
	dUV			 /= refinSteps;			// change displacement depth for refinement
	previous_hit = 0;					// reset already-hit variable
	hit_h		 = 0;					// reset hit height
	hit_step	 = 0;					// reset hit step
	tUV			 = UV;					// reset step uv coords

	stepSize /= refinSteps;
	for(int i = 0; i < refinSteps; ++i)
	{
		h  -= stepSize;
		tUV += dUV;
		float h_tex			= texture2D(HeightTextureSampler, tUV).r;
		float is_first_hit	= clamp((h_tex - h - previous_hit) * 4999999, 0, 1);

//		hit_h		 += is_first_hit * h; // we never actually use this later so just skip it here
		hit_step	 += is_first_hit * i;
		previous_hit += is_first_hit;
	}
	finalUV += ((hit_step + 1) * dUV);		// change UV coords according to our refinement hit
}

void main()
{
	// displacement
	vec2 finalUV = UV;
	if(mappingMode == 3) {
		displaceUV(finalUV);
	}

	// Material properties
	vec3 MaterialDiffuseColor = mappingMode == 0 ? vec3(1, 1, 1) : texture2D(DiffuseTextureSampler, finalUV).rgb;

	// Local normal, in tangent space. 
	vec3 TextureNormal_tangentspace =  vec3(0,0,0);
	if(mappingMode >= 2) {
		TextureNormal_tangentspace = texture2D(NormalTextureSampler, finalUV).rgb * 2.0 - 1.0;
	}
	
	// Distance calculations for point and spot lights
	float distanceSqr = 1;
	if(lightType != 0)	// != directional light
	{
		vec3 fragmentToLight = (LightPosition_worldspace - Position_worldspace);
		distanceSqr = dot(fragmentToLight, fragmentToLight);
	}

	// Normalize relevant vectors for lighting calculations
	vec3 N = mappingMode >= 2 ? normalize(TextureNormal_tangentspace)  : normalize(Normal_cameraspace);			// Normal of the computed fragment
	vec3 L = mappingMode >= 2 ? normalize(LightDirection_tangentspace) : normalize(LightDirection_cameraspace);	// Direction of the light (from the fragment to the light)
	vec3 V = mappingMode >= 2 ? normalize(EyeDirection_tangentspace)   : normalize(EyeDirection_cameraspace);;	// Eye vector (towards the camera)
	
	vec3 R = vec3(0, 0, 0);
	vec3 H = vec3(0, 0, 0);
	if(specularMode == 0) 
	{
		R = normalize(2 * dot(N, L) * N - L);		// Direction in which the triangle reflects the light. R = 2 * (N.L) * N – L
//		R = reflect(-L, N);						// expands to -L - 2.0 * dot(N, -L) * N.
	}
	else if(specularMode == 1) {
		H = normalize(V + L);
	}

	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp(dot(N, L), 0, 1);

	// compute self-shadowing term
	float shadow = selfShadowing == 1 ? clamp(4 * cosTheta, 0, 1) : 1.0;
	
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = 0.0;
	if(specularMode == 0) {
		cosAlpha = clamp(dot(R, V), 0, 1);
	}
	else if(specularMode == 1) {
		cosAlpha = clamp(dot(N, H), 0, 1);
	}
	
	// final color calculations
	vec3 ambient	= AmbientPower * MaterialDiffuseColor * ambientLighting;
	vec3 diffuse	= MaterialDiffuseColor * LightColor *  LightPower * diffuseLighting;
	vec3 specular	= MaterialSpecularColor * LightColor * LightPower * specularLighting;

	// variant A: diffuse and specular parts independant from shadow and distanceSqr. Order: ((diffuse + specular) * shadow) / distanceSqr
	color = ambient + shadow * (diffuse * cosTheta + specular * pow(cosAlpha, MaterialSpecularLobe)) / distanceSqr;	
	// variant B: distanceSqr part of diffuse and specular parts. Order: (diffuse / distanceSqr + specular / distanceSqr) * shadow					
//	color = ambient + shadow * (diffuse * cosTheta /  distanceSqr + specular * pow(cosAlpha, MaterialSpecularLobe) / distanceSqr);	
	// variant C: distanceSqr and shadow part of diffuse and specular parts. Order: shadow * diffuse / distanceSqr + shadow * specular /distanceSqr		
//	color = ambient + shadow * diffuse * cosTheta / distanceSqr + shadow * specular * pow(cosAlpha, MaterialSpecularLobe) / distanceSqr;
	// Variant D: like A but with different distance caluclation: I = A +((S *(D * N.L + (R.V)n)) * Att)
//	color = ambient + ((shadow * (diffuse * cosTheta + specular * pow(cosAlpha, MaterialSpecularLobe))) * (1 - distanceSqr));
}
