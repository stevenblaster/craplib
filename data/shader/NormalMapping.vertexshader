#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;
layout(location = 3) in vec3 vertexTangent_modelspace;
layout(location = 4) in vec3 vertexBitangent_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Position_worldspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 Normal_cameraspace;

out vec3 LightDirection_tangentspace;
out vec3 EyeDirection_tangentspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform mat4 MIT;
uniform vec3 LightPosition_worldspace;
uniform vec3 LightDirection_worldspace;

uniform int lightType;
uniform int mappingMode;

void main()
{
	vec4 vertexPosition_modelspace_4 = vec4(vertexPosition_modelspace, 1);

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vertexPosition_modelspace_4;
	
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (M * vertexPosition_modelspace_4).xyz;
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = (V * vec4(Position_worldspace, 1)).xyz;
	EyeDirection_cameraspace = vec3(0, 0, 0) - vertexPosition_cameraspace;

	// Vector that goes from the vertex to the light, in camera space.
	LightDirection_cameraspace = vec3(0, 0, 0);
	if(lightType == 1)	// point light
	{
		vec3 LightPosition_cameraspace = (V * vec4(LightPosition_worldspace, 1)).xyz;
		LightDirection_cameraspace = LightPosition_cameraspace - vertexPosition_cameraspace;
	}
	else if(lightType == 0)  {	// directional light
		LightDirection_cameraspace = (V * vec4(-LightDirection_worldspace, 0)).xyz;
	}
	
	// Normal of the the vertex, in camera space
	Normal_cameraspace = (V * M * vec4(vertexNormal_modelspace, 0)).xyz;

	// UV of the vertex. No special space for this one.
	UV = vertexUV;

	if(mappingMode >= 2)	// == Normal mapping
	{
		// model to camera = ModelView
		vec3 vertexTangent_cameraspace = MV3x3 * vertexTangent_modelspace;
		vec3 vertexBitangent_cameraspace = MV3x3 * vertexBitangent_modelspace;
		vec3 vertexNormal_cameraspace = MV3x3 * vertexNormal_modelspace;
	
		mat3 TBN = transpose(mat3
		(
			vertexTangent_cameraspace,
			vertexBitangent_cameraspace,
			vertexNormal_cameraspace	
		)); // You can use dot products instead of building this matrix and transposing it. See References for details.

		LightDirection_tangentspace = TBN * LightDirection_cameraspace;
		EyeDirection_tangentspace =  TBN * EyeDirection_cameraspace;
	}
}

